// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  EDITOR
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String    @unique
  password               String?
  image                  String?
  role                   UserRole  @default(USER)
  isVerified             Boolean   @default(false)
  emailVerified          DateTime?
  verificationToken      String?
  verificationTokenExpires DateTime?  
  passwordResetToken     String?
  passwordResetExpires   DateTime?

  accounts               Account[]
  sessions               Session[]
  articles               Article[]
  comments               Comment[]
  savedArticles          SavedArticle[]
  notifications          Notification[]

  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  excerpt     String?   @db.Text
  slug        String?   @unique
  imageUrl    String?
  category    String
  status      String    @default("draft") // draft, published, archived
  viewCount   Int       @default(0)
  likeCount   Int       @default(0)
  featured    Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  
  comments    Comment[]
  tags        Tag[]     @relation("ArticleToTag")
  savedBy     SavedArticle[]
  categories  Category[] @relation("ArticleToCategory")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  
  parentId  String?
  parent    Comment? @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies   Comment[] @relation("CommentToComment")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  articles  Article[] @relation("ArticleToTag")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   @db.Text
  imageUrl    String?
  articles    Article[] @relation("ArticleToCategory")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SavedArticle {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String

  @@unique([userId, articleId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // comment, like, mention, system
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  relatedId String?  // ID of related entity (article, comment, etc.)
  link      String?  // Optional link to navigate to
}
